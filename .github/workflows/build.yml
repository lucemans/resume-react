name: Build Package

on:
  push:
    branches: [master]
    tags:
      - v*

env:
  IMAGE_NAME: resume

jobs:
  build:
    runs-on: ubuntu-20.04
    name: Build Package
    steps:
      - uses: actions/checkout@v2
      - name: Build Package
        run: docker build . --tag $IMAGE_NAME
      - name: Log into Lucemans registry
        run: echo "${{ secrets.LVK_REGISTRY }}" | docker login lvk.sh -u lucemans --password-stdin
      - name: Push image
        run: |
          IMAGE_ID=lvk.sh/resume

          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          echo $IMAGE_ID
          echo $VERSION

          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    # needs: ['build']

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    - name: Change Directories
      run: cd terraform

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TERRAFORM_TOKEN }}
    - name: Dump Kubeconfig file
      run: mkdir ~/.kube && echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > ~/.kube/config && KUBECONFIG=~/.kube/config
      working-directory: terraform

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
      working-directory: terraform
    
    - name: Setup vars
      run: VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

    - name: echo vars
      run: echo '$VERSION'

      # On push to master, build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/master' && github.event_name == 'push'
      run: terraform apply -auto-approve -var container=lvk.sh/resume:$(echo $VERSION)
      working-directory: terraform